diff --git a/config/initializers/000-logger.rb b/config/initializers/000-logger.rb
new file mode 100644
index 00000000..5e5969f3
--- /dev/null
+++ b/config/initializers/000-logger.rb
@@ -0,0 +1,93 @@
+# Modified from Rails:BacktraceCleaner
+class BackTraceCleaner < ActiveSupport::BacktraceCleaner
+  APP_DIRS_PATTERN = /^\/?(app|config|lib|test|\(\w*\))/
+  RENDER_TEMPLATE_PATTERN = /:in `.*_\w+_{2,3}\d+_\d+'/
+  EMPTY_STRING = ""
+  SLASH = "/"
+  DOT_SLASH = "./"
+
+  def initialize
+    super
+    @root = "#{Rails.root.parent}/" # use `parent` because spree is broke into gems
+    add_filter { |line| line.sub(@root, EMPTY_STRING) }
+    add_filter { |line| line.sub(RENDER_TEMPLATE_PATTERN, EMPTY_STRING) }
+    add_filter { |line| line.sub(DOT_SLASH, SLASH) } # for tests
+    # add_silencer { |line| !APP_DIRS_PATTERN.match?(line) }
+  end
+end
+
+module SqlSource
+  class << self
+    attr_accessor :current_api
+    attr_accessor :dest
+
+    # Use this or queries from concurrent requests will be messed up
+    def store
+      defined?(RequestStore) ? RequestStore.store : Thread.current
+    end
+
+    def register_sql(sql)
+      store[:sql_log] ||= []
+      store[:sql_log] << sql
+    end
+
+    def finish_api(event)
+      sql_log = store[:sql_log]
+      sql_log ||= []
+      store[:sql_log] = nil
+
+      header = "#{event.payload[:method]} #{event.payload[:path]}"
+      sql_log.unshift("+#{header}")
+      sql_log << "-#{header}"
+      @dest.puts sql_log.join("\n")
+      @dest.flush
+    end
+  end
+end
+
+# From lograge
+def remove_existing_log_subscriptions
+  require 'action_controller/log_subscriber'
+  ActiveSupport::LogSubscriber.log_subscribers.each do |subscriber|
+    case subscriber
+    when ActionView::LogSubscriber
+      unsubscribe(:action_view, subscriber)
+    when ActionController::LogSubscriber
+      unsubscribe(:action_controller, subscriber)
+    end
+  end
+end
+
+def unsubscribe(component, subscriber)
+  events = subscriber.public_methods(false).reject { |method| method.to_s == 'call' }
+  events.each do |event|
+    ActiveSupport::Notifications.notifier.listeners_for("#{event}.#{component}").each do |listener|
+      if listener.instance_variable_get('@delegate') == subscriber
+        ActiveSupport::Notifications.unsubscribe listener
+      end
+    end
+  end
+end
+
+SqlSource.dest = File.new("sql-#{Time.now.strftime("%m-%d_%H-%M-%S")}.logs", "w")
+cleaner = BackTraceCleaner.new
+
+ActiveSupport::Notifications.subscribe "sql.active_record" do |*args|
+  event = ActiveSupport::Notifications::Event.new *args
+
+  cleaned_trace = cleaner.clean(caller).join(", ")
+
+  #unless event.payload[:cached] or event.payload[:name] == 'SCHEMA'
+    SqlSource.register_sql "\##{cleaned_trace}"
+    SqlSource.register_sql event.payload[:sql]
+  #end
+end
+
+# There is also a `start_processing.action_controller` event which is fired when an action
+# begins to be handled
+ActiveSupport::Notifications.subscribe "process_action.action_controller" do |*args|
+  event = ActiveSupport::Notifications::Event.new *args
+
+  SqlSource.finish_api event
+end
+
diff --git a/config/initializers/300-perf.rb b/config/initializers/300-perf.rb
index 86822bff..dada65cb 100644
--- a/config/initializers/300-perf.rb
+++ b/config/initializers/300-perf.rb
@@ -8,7 +8,7 @@ if Rails.env == "production"
   # at this level
   #
   # Micro bench shows for `User.first` this takes us from 3.3k/s to 3.5k/s
-  ActiveSupport::Notifications.notifier.unsubscribe("sql.active_record")
+  # ActiveSupport::Notifications.notifier.unsubscribe("sql.active_record")
 end
 
 # this hook can be used by plugins to amend the middleware stack or patch any initializer behavior
diff --git a/lib/mini_sql_multisite_connection.rb b/lib/mini_sql_multisite_connection.rb
index a4feb1a8..3aafd7f4 100644
--- a/lib/mini_sql_multisite_connection.rb
+++ b/lib/mini_sql_multisite_connection.rb
@@ -108,4 +108,28 @@ class MiniSqlMultisiteConnection < MiniSql::Postgres::Connection
     end
   end
 
+  def log_sql(sql, *params)
+    cleaner = ::BackTraceCleaner.new
+    cleaned_trace = cleaner.clean(caller).join(", ")
+
+    SqlSource.register_sql "\##{cleaned_trace}"
+    SqlSource.register_sql sql + " || " + params.to_s
+  end
+
+  def query(sql, *params)
+    log_sql(sql, *params)
+    super
+  end
+
+  def query_single(sql, *params)
+    log_sql(sql, *params)
+    super
+  end
+
+  def exec(sql, *params)
+    log_sql(sql, *params)
+    super
+  end
+
+
 end
